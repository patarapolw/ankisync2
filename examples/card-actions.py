#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# card-actions.py : implementation of the Card Actions
# Author: sosie <sosie@sos-productions.com> (08.2021)
# Note: this is a direct copy, autogenerated from the fixed API docs found on FooSoft productions website
# using Anᴵkisync2_api.py script. Some examples may not work
# due to the missing test database collections.anki2 in the current user anki directory
# See : https://foosoft.net/projects/anki-connect/#card-actions
#
#sudo pip3 install ankisync2
import os

from ankisync2.ankiconnect import  ankiconnect as invoke

        """====================================Returns an array with the ease factor for each of the given cards (in the same order).===================================="""cards=[
    1483959291685,
    1483959293217
]result = invoke("getEaseFactors", cards=cards)#Example of result: { "result" : [ 4100 , 3900 ], "error" : null }"""====================================Sets ease factor of cards by card ID; returns true if successful (all cards existed) or false otherwise.===================================="""cards=[
    1483959291685,
    1483959293217
]easeFactors=[
    4100,
    3900
]result = invoke("setEaseFactors", cards=cards, easeFactors=easeFactors)#Example of result: { "result" : [ true , true ], "error" : null }"""====================================Suspend cards by card ID; returns true if successful (at least one card wasn’t already suspended) or false otherwise.===================================="""cards=[
    1483959291685,
    1483959293217
]result = invoke("suspend", cards=cards)#Example of result: { "result" : true , "error" : null }"""====================================Unsuspend cards by card ID; returns true if successful (at least one card was previously suspended) or false otherwise.===================================="""cards=[
    1483959291685,
    1483959293217
]result = invoke("unsuspend", cards=cards)#Example of result: { "result" : true , "error" : null }"""====================================Check if card is suspended by its ID. Returns true if suspended, false otherwise.===================================="""card=1483959293217result = invoke("suspended", card=card)#Example of result: { "result" : true , "error" : null }"""====================================Returns an array indicating whether each of the given cards is suspended (in the same order). If card doesn’t exist returns null .===================================="""cards=[
    1483959291685,
    1483959293217,
    1234567891234
]result = invoke("areSuspended", cards=cards)#Example of result: { "result" : [ false , true , null ], "error" : null }"""====================================Returns an array indicating whether each of the given cards is due (in the same order). Note : cards in the learning queue with a large interval (over 20 minutes) are treated as not due until the time of their interval has passed, to match the way Anki treats them when reviewing.===================================="""cards=[
    1483959291685,
    1483959293217
]result = invoke("areDue", cards=cards)#Example of result: { "result" : [ false , true ], "error" : null }"""====================================Returns an array of the most recent intervals for each given card ID, or a 2-dimensional array of all the intervals for each given card ID when complete is true . Negative intervals are in seconds and positive intervals in days.===================================="""cards=[
    1502298033753,
    1502298036657
]result = invoke("getIntervals", cards=cards)#Example of result: { "result" : [ -14400 , 3 ], "error" : null }"""====================================Returns an array of card IDs for a given query. Functionally identical to guiBrowse but doesn’t use the GUI for better performance.===================================="""query="deck:current"result = invoke("findCards", query=query)#Example of result: { "result" : [ 1494723142483 , 1494703460437 , 1494703479525 ], "error" : null }"""====================================Returns an unordered array of note IDs for the given card IDs. For cards with the same note, the ID is only given once in the array.===================================="""cards=[
    1502098034045,
    1502098034048,
    1502298033753
]result = invoke("cardsToNotes", cards=cards)#Example of result: { "result" : [ 1502098029797 , 1502298025183 ], "error" : null }"""====================================Returns a list of objects containing for each card ID the card fields, front and back sides including CSS, note type, the note that the card belongs to, and deck name, as well as ease and interval.===================================="""cards=[
    1498938915662,
    1502098034048
]result = invoke("cardsInfo", cards=cards)#Example of result: { "result" : [         { "answer" : "back content" , "question" : "front content" , "deckName" : "Default" , "modelName" : "Basic" , "fieldOrder" : 1 , "fields" : { "Front" : { "value" : "front content" , "order" : 0 }, "Back" : { "value" : "back content" , "order" : 1 }             }, "css" : "p {font-family:Arial;}" , "cardId" : 1498938915662 , "interval" : 16 , "note" : 1502298033753 , "ord" : 1 , "type" : 0 , "queue" : 0 , "due" : 1 , "reps" : 1 , "lapses" : 0 , "left" : 6 },         { "answer" : "back content" , "question" : "front content" , "deckName" : "Default" , "modelName" : "Basic" , "fieldOrder" : 0 , "fields" : { "Front" : { "value" : "front content" , "order" : 0 }, "Back" : { "value" : "back content" , "order" : 1 }             }, "css" : "p {font-family:Arial;}" , "cardId" : 1502098034048 , "interval" : 23 , "note" : 1502298033753 , "ord" : 1 , "type" : 0 , "queue" : 0 , "due" : 1 , "reps" : 1 , "lapses" : 0 , "left" : 6 }     ], "error" : null }"""====================================Forget cards, making the cards new again.===================================="""cards=[
    1498938915662,
    1502098034048
]result = invoke("forgetCards", cards=cards)#Example of result: { "result" : null , "error" : null }"""====================================Make cards be “relearning”.===================================="""cards=[
    1498938915662,
    1502098034048
]result = invoke("relearnCards", cards=cards)#Example of result: { "result" : null , "error" : null }