#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# graphical-actions.py : implementation of the Graphical Actions
# Author: sosie <sosie@sos-productions.com> (08.2021)
# Note: this is a direct copy, autogenerated from the fixed API docs found on FooSoft productions website
# using Anᴵkisync2_api.py script. Some examples may not work
# due to the missing test database collections.anki2 in the current user anki directory
# See : https://foosoft.net/projects/anki-connect/#graphical-actions
#
#sudo pip3 install ankisync2
import os

from ankisync2.ankiconnect import  ankiconnect as invoke

        """====================================Invokes the Card Browser dialog and searches for a given query. Returns an array of identifiers of the cards that were found. Query syntax is documented here .===================================="""query="deck:current"result = invoke("guiBrowse", query=query)#Example of result: { "result" : [ 1494723142483 , 1494703460437 , 1494703479525 ], "error" : null }"""====================================Invokes the               Add Cards              dialog, presets the note using the given deck and model, with the provided field values and tags. Invoking it multiple times closes the old window and               reopen the window              with the new provided values.             Audio, video, and picture files can be embedded into the fields via the               audio              ,               video              , and               picture              keys, respectively. Refer to the documentation of               addNote              and               storeMediaFile              for an explanation of these fields.             The               closeAfterAdding              member inside               options              group can be set to true to create a dialog that closes upon adding the note. Invoking the action mutliple times with this option will create               multiple windows              .             The result is the ID of the note which would be added, if the user chose to confirm the               Add Cards              dialogue.===================================="""note={
    "deckName": "Default",
    "modelName": "Cloze",
    "fields": {
        "Text": "The capital of Romania is {{c1::Bucharest}}",
        "Extra": "Romania is a country in Europe"
    },
    "options": {
        "closeAfterAdding": true
    },
    "tags": [
        "countries"
    ],
    "picture": [
        {
            "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/1/13/EU-Romania.svg/285px-EU-Romania.svg.png",
            "filename": "romania.png",
            "fields": [
                "Extra"
            ]
        }
    ]
}result = invoke("guiAddCards", note=note)#Example of result: { "result" : 1496198395707 , "error" : null }"""====================================Returns information about the current card or null if not in review mode.===================================="""result = invoke("guiCurrentCard")#Example of result: { "result" : { "answer" : "back content" , "question" : "front content" , "deckName" : "Default" , "modelName" : "Basic" , "fieldOrder" : 0 , "fields" : { "Front" : { "value" : "front content" , "order" : 0 }, "Back" : { "value" : "back content" , "order" : 1 }         }, "template" : "Forward" , "cardId" : 1498938915662 , "buttons" : [ 1 , 2 , 3 ], "nextReviews" : [ "<1m" , "<10m" , "4d" ]     }, "error" : null }"""====================================Starts or resets the timerStarted value for the current card. This is useful for deferring the start time to when it is displayed via the API, allowing the recorded time taken to answer the card to be more accurate when calling guiAnswerCard .===================================="""result = invoke("guiStartCardTimer")#Example of result: { "result" : true , "error" : null }"""====================================Shows question text for the current card; returns true if in review mode or false otherwise.===================================="""result = invoke("guiShowQuestion")#Example of result: { "result" : true , "error" : null }"""====================================Shows answer text for the current card; returns true if in review mode or false otherwise.===================================="""result = invoke("guiShowAnswer")#Example of result: { "result" : true , "error" : null }"""====================================Answers the current card; returns true if succeeded or false otherwise. Note that the answer for the current card must be displayed before before any answer can be accepted by Anki.===================================="""ease=1result = invoke("guiAnswerCard", ease=ease)#Example of result: { "result" : true , "error" : null }"""====================================Opens the Deck Overview dialog for the deck with the given name; returns true if succeeded or false otherwise.===================================="""name="Default"result = invoke("guiDeckOverview", name=name)#Example of result: { "result" : true , "error" : null }"""====================================Opens the Deck Browser dialog.===================================="""result = invoke("guiDeckBrowser")#Example of result: { "result" : null , "error" : null }"""====================================Starts review for the deck with the given name; returns true if succeeded or false otherwise.===================================="""name="Default"result = invoke("guiDeckReview", name=name)#Example of result: { "result" : true , "error" : null }"""====================================Schedules a request to gracefully close Anki. This operation is asynchronous, so it will return immediately and won’t wait until the Anki process actually terminates.===================================="""result = invoke("guiExitAnki")#Example of result: { "result" : null , "error" : null }"""====================================Requests a database check, but returns immediately without waiting for the check to complete. Therefore, the action will always return true even if errors are detected during the database check.===================================="""result = invoke("guiCheckDatabase")#Example of result: { "result" : true , "error" : null }