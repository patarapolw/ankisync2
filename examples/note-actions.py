#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# note-actions.py : implementation of the Note Actions
# Author: sosie <sosie@sos-productions.com> (08.2021)
# Note: this is a direct copy, autogenerated from the fixed API docs found on FooSoft productions website
# using Anᴵkisync2_api.py script. Some examples may not work
# due to the missing test database collections.anki2 in the current user anki directory
# See : https://foosoft.net/projects/anki-connect/#note-actions
#
#sudo pip3 install ankisync2
import os

from ankisync2.ankiconnect import  ankiconnect as invoke

        """====================================Creates a note using the given deck and model, with the provided field values and tags. Returns the identifier of the created note created on success, and               null              on failure.             AnkiConnect can download audio, video, and picture files and embed them in newly created notes. The corresponding               audio              ,               video              , and               picture              note members are optional and can be omitted. If you choose to include any of them, they should contain a single object or an array of objects with the mandatory               filename              field and one of               data              ,               path              or               url              . Refer to the documentation of               storeMediaFile              for an explanation of these fields. The               skipHash              field can be optionally provided to skip the inclusion of files with an MD5 hash that matches the provided value. This is useful for avoiding the saving of error pages and stub files. The               fields              member is a list of fields that should play audio or video, or show a picture when the card is displayed in Anki. The               allowDuplicate              member inside               options              group can be set to true to enable adding duplicate cards. Normally duplicate cards can not be added and trigger exception.             The               duplicateScope              member inside               options              can be used to specify the scope for which duplicates are checked. A value of               "deck"              will only check for duplicates in the target deck; any other value will check the entire collection.             The               duplicateScopeOptions              object can be used to specify some additional settings:                 duplicateScopeOptions.deckName                will specify which deck to use for checking duplicates in. If undefined or                 null                , the target deck will be used.                  duplicateScopeOptions.checkChildren                will change whether or not duplicate cards are checked in child decks. The default value is                 false                .                  duplicateScopeOptions.checkAllModels                specifies whether duplicate checks are performed across all note types. The default value is                 false                .===================================="""note={
    "deckName": "Default",
    "modelName": "Basic",
    "fields": {
        "Front": "front content",
        "Back": "back content"
    },
    "options": {
        "allowDuplicate": false,
        "duplicateScope": "deck",
        "duplicateScopeOptions": {
            "deckName": "Default",
            "checkChildren": false,
            "checkAllModels": false
        }
    },
    "tags": [
        "yomichan"
    ],
    "audio": [
        {
            "url": "https://assets.languagepod101.com/dictionary/japanese/audiomp3.php?kanji=猫&kana=ねこ",
            "filename": "yomichan_ねこ_猫.mp3",
            "skipHash": "7e2c2f954ef6051373ba916f000168dc",
            "fields": [
                "Front"
            ]
        }
    ],
    "video": [
        {
            "url": "https://cdn.videvo.net/videvo_files/video/free/2015-06/small_watermarked/Contador_Glam_preview.mp4",
            "filename": "countdown.mp4",
            "skipHash": "4117e8aab0d37534d9c8eac362388bbe",
            "fields": [
                "Back"
            ]
        }
    ],
    "picture": [
        {
            "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/A_black_cat_named_Tilly.jpg/220px-A_black_cat_named_Tilly.jpg",
            "filename": "black_cat.jpg",
            "skipHash": "8d6e4646dfae812bf39651b59d7429ce",
            "fields": [
                "Back"
            ]
        }
    ]
}result = invoke("addNote", note=note)#Example of result: { "result" : 1496198395707 , "error" : null }"""====================================Creates multiple notes using the given deck and model, with the provided field values and tags. Returns an array of identifiers of the created notes (notes that could not be created will have a null identifier). Please see the documentation for addNote for an explanation of objects in the notes array.===================================="""notes=[
    {
        "deckName": "Default",
        "modelName": "Basic",
        "fields": {
            "Front": "front content",
            "Back": "back content"
        },
        "tags": [
            "yomichan"
        ],
        "audio": [
            {
                "url": "https://assets.languagepod101.com/dictionary/japanese/audiomp3.php?kanji=猫&kana=ねこ",
                "filename": "yomichan_ねこ_猫.mp3",
                "skipHash": "7e2c2f954ef6051373ba916f000168dc",
                "fields": [
                    "Front"
                ]
            }
        ],
        "video": [
            {
                "url": "https://cdn.videvo.net/videvo_files/video/free/2015-06/small_watermarked/Contador_Glam_preview.mp4",
                "filename": "countdown.mp4",
                "skipHash": "4117e8aab0d37534d9c8eac362388bbe",
                "fields": [
                    "Back"
                ]
            }
        ],
        "picture": [
            {
                "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/A_black_cat_named_Tilly.jpg/220px-A_black_cat_named_Tilly.jpg",
                "filename": "black_cat.jpg",
                "skipHash": "8d6e4646dfae812bf39651b59d7429ce",
                "fields": [
                    "Back"
                ]
            }
        ]
    }
]result = invoke("addNotes", notes=notes)#Example of result: { "result" : [ 1496198395707 , null ], "error" : null }"""====================================Accepts an array of objects which define parameters for candidate notes (see addNote ) and returns an array of booleans indicating whether or not the parameters at the corresponding index could be used to create a new note.===================================="""notes=[
    {
        "deckName": "Default",
        "modelName": "Basic",
        "fields": {
            "Front": "front content",
            "Back": "back content"
        },
        "tags": [
            "yomichan"
        ]
    }
]result = invoke("canAddNotes", notes=notes)#Example of result: { "result" : [ true ], "error" : null }"""====================================Modify the fields of an exist note. You can also include audio, video, or picture files which will be added to the note with an optional audio , video , or picture property. Please see the documentation for addNote for an explanation of objects in the audio , video , or picture array.===================================="""note={
    "id": 1514547547030,
    "fields": {
        "Front": "new front content",
        "Back": "new back content"
    },
    "audio": [
        {
            "url": "https://assets.languagepod101.com/dictionary/japanese/audiomp3.php?kanji=猫&kana=ねこ",
            "filename": "yomichan_ねこ_猫.mp3",
            "skipHash": "7e2c2f954ef6051373ba916f000168dc",
            "fields": [
                "Front"
            ]
        }
    ]
}result = invoke("updateNoteFields", note=note)#Example of result: { "result" : null , "error" : null }"""====================================Adds tags to notes by note ID.===================================="""notes=[
    1483959289817,
    1483959291695
]tags="european-languages"result = invoke("addTags", notes=notes, tags=tags)#Example of result: { "result" : null , "error" : null }"""====================================Remove tags from notes by note ID.===================================="""notes=[
    1483959289817,
    1483959291695
]tags="european-languages"result = invoke("removeTags", notes=notes, tags=tags)#Example of result: { "result" : null , "error" : null }"""====================================Gets the complete list of tags for the current user.===================================="""result = invoke("getTags")#Example of result: { "result" : [ "european-languages" , "idioms" ], "error" : null }"""====================================Clears all the unused tags in the notes for the current user.===================================="""result = invoke("clearUnusedTags")#Example of result: { "result" : null , "error" : null }"""====================================Replace tags in notes by note ID.===================================="""notes=[
    1483959289817,
    1483959291695
]tag_to_replace="european-languages"replace_with_tag="french-languages"result = invoke("replaceTags", notes=notes, tag_to_replace=tag_to_replace, replace_with_tag=replace_with_tag)#Example of result: { "result" : null , "error" : null }"""====================================Replace tags in all the notes for the current user.===================================="""tag_to_replace="european-languages"replace_with_tag="french-languages"result = invoke("replaceTagsInAllNotes", tag_to_replace=tag_to_replace, replace_with_tag=replace_with_tag)#Example of result: { "result" : null , "error" : null }"""====================================Returns an array of note IDs for a given query. Query syntax is documented here .===================================="""query="deck:current"result = invoke("findNotes", query=query)#Example of result: { "result" : [ 1483959289817 , 1483959291695 ], "error" : null }"""====================================Returns a list of objects containing for each note ID the note fields, tags, note type and the cards belonging to the note.===================================="""notes=[
    1502298033753
]result = invoke("notesInfo", notes=notes)#Example of result: { "result" : [         { "noteId" : 1502298033753 , "modelName" : "Basic" , "tags" :[ "tag" , "another_tag" ], "fields" : { "Front" : { "value" : "front content" , "order" : 0 }, "Back" : { "value" : "back content" , "order" : 1 }             }         }     ], "error" : null }"""====================================Deletes notes with the given ids. If a note has several cards associated with it, all associated cards will be deleted.===================================="""notes=[
    1502298033753
]result = invoke("deleteNotes", notes=notes)#Example of result: { "result" : null , "error" : null }"""====================================Removes all the empty notes for the current user.===================================="""result = invoke("removeEmptyNotes")#Example of result: { "result" : null , "error" : null }