#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# miscellaneous-actions.py : implementation of the Miscellaneous Actions
# Author: sosie <sosie@sos-productions.com> (08.2021)
# Note: this is a direct copy, autogenerated from the fixed API docs found on FooSoft productions website
# using Anᴵkisync2_api.py script. Some examples may not work
# due to the missing test database collections.anki2 in the current user anki directory
# See : https://foosoft.net/projects/anki-connect/#miscellaneous-actions
#
#sudo pip3 install ankisync2
import os

from ankisync2.ankiconnect import  ankiconnect as invoke

        """====================================Request permission to use the API exposed by this plugin. Only request coming from origin listed in the               webCorsOriginList              option are allowed to use the Api. Calling this method will display a popup asking the user if he want to allow your origin to use the Api. This is the only method that can be called even if the origin of the request isn’t in the               webCorsOriginList              list. It also doesn’t require the api key. Calling this method will not display the popup if the origin is already trusted.             This should be the first call you make to make sure that your application and AnkiConnect are able to communicate properly with each other. New versions of AnkiConnect are backwards compatible; as long as you are using actions which are available in the reported AnkiConnect version or earlier, everything should work fine.               Sample request              :===================================="""result = invoke("requestPermission")#Example of result: { "result" : { "permission" : "denied" }, "error" : null }"""====================================Gets the version of the API exposed by this plugin. Currently versions 1 through 6 are defined.===================================="""result = invoke("version")#Example of result: { "result" : 6 , "error" : null }"""====================================Synchronizes the local Anki collections with AnkiWeb.===================================="""result = invoke("sync")#Example of result: { "result" : null , "error" : null }"""====================================Retrieve the list of profiles.===================================="""result = invoke("getProfiles")#Example of result: { "result" : [ "User 1" ], "error" : null }"""====================================Selects the profile specified in request.===================================="""name="user1"result = invoke("loadProfile", name=name)#Example of result: { "result" : true , "error" : null }"""====================================Performs multiple actions in one request, returning an array with the response of each action (in the given order).===================================="""actions=[
    {
        "action": "deckNames"
    },
    {
        "action": "browse",
        "params": {
            "query": "deck:current"
        }
    }
]result = invoke("multi", actions=actions)#Example of result: { "result" : [         { "result" : "Default" , "error" : null },         { "result" : [ 1494723142483 , 1494703460437 , 1494703479525 ], "error" : null }     ], "error" : null }"""====================================Exports a given deck in .apkg format. Returns true if successful or false otherwise. The optional property includeSched (default is false ) can be specified to include the cards' scheduling data.===================================="""deck="Default"path="/data/Deck.apkg"includeSched=trueresult = invoke("exportPackage", deck=deck, path=path, includeSched=includeSched)#Example of result: { "result" : true , "error" : null }"""====================================Imports a file in .apkg format into the collection. Returns true if successful or false otherwise. Note that the file path is relative to Anki’s collection.media folder, not to the client.===================================="""path="/data/Deck.apkg"result = invoke("importPackage", path=path)#Example of result: { "result" : true , "error" : null }"""====================================Tells anki to reload all data from the database.===================================="""result = invoke("reloadCollection")#Example of result: { "result" : null , "error" : null }