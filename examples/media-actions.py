#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# media-actions.py : implementation of the Media Actions
# Author: sosie <sosie@sos-productions.com> (08.2021)
# Note: this is a direct copy, autogenerated from the fixed API docs found on FooSoft productions website
# using Aná´µkisync2_api.py script. Some examples may not work
# due to the missing test database collections.anki2 in the current user anki directory
# See : https://foosoft.net/projects/anki-connect/#media-actions
#
#sudo pip3 install ankisync2
import os

from ankisync2.ankiconnect import  ankiconnect as invoke

        """====================================Stores a file with the specified base64-encoded contents inside the media folder. Alternatively you can specify a absolute file path, or a url from where the file shell be downloaded. If more than one of               data              ,               path              and               url              are provided, the               data              field will be used first, then               path              , and finally               url              . To prevent Anki from removing files not used by any cards (e.g. for configuration files), prefix the filename with an underscore. These files are still synchronized to AnkiWeb. Any existing file with the same name is deleted by default. Set               deleteExisting              to false to prevent that by               letting Anki give the new file a non-conflicting name              .               Sample request              :      {     "action": "storeMediaFile",     "version": 6,     "params": {         "filename": "_hello.txt",         "data": "SGVsbG8sIHdvcmxkIQ=="     } }          Sample result              :      {     "result": "_hello.txt",     "error": null }          Content of                 _hello.txt                :      Hello world!          Sample request              :      {     "action": "storeMediaFile",     "version": 6,     "params": {         "filename": "_hello.txt",         "path": "/path/to/file"     } }          Sample result              :      {     "result": "_hello.txt",     "error": null }===================================="""filename="_hello.txt"url="https://url.to.file"result = invoke("storeMediaFile", filename=filename, url=url)#Example of result: { "result" : "_hello.txt" , "error" : null }"""====================================Retrieves the base64-encoded contents of the specified file, returning false if the file does not exist.===================================="""filename="_hello.txt"result = invoke("retrieveMediaFile", filename=filename)#Example of result: { "result" : "SGVsbG8sIHdvcmxkIQ==" , "error" : null }"""====================================Gets the names of media files matched the pattern. Returning all names by default.===================================="""pattern="_hell*.txt"result = invoke("getMediaFilesNames", pattern=pattern)#Example of result: { "result" : [ "_hello.txt" ], "error" : null }"""====================================Deletes the specified file inside the media folder.===================================="""filename="_hello.txt"result = invoke("deleteMediaFile", filename=filename)#Example of result: { "result" : null , "error" : null }